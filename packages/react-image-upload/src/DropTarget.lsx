// Div onto which an image can be dropped, or uploaded by clicking and picking
// from the local image store.
import React from 'react'
import PropTypes from 'prop-types'

import { deviceEvents } from './events'
import ImageLoader from './ImageLoader'

export default class DropTarget extends React.PureComponent:
  static propTypes = {
    crossOrigin: PropTypes.oneOf(['', 'anonymous', 'use-credentials'])
    onError: PropTypes.func
    onImage: PropTypes.func
    disableDrop: PropTypes.bool
    disableClick: PropTypes.bool
    clickEvent: PropTypes.string
  }

  static defaultProps = {
    onError: -> return
    onImage: -> return
    clickEvent: 'onClick'
  }

  constructor(props) ->
    super(props)

  handleImageReady(img, file) =>
    this.props.onImage(img, file.type, file)

  handleDragOver(e) ->
    // eslint-disable-next-line no-undef
    now e = e or window.event
    e.preventDefault()

  handleDrop(e) =>
    // eslint-disable-next-line no-undef
    now e = e or window.event
    e.stopPropagation()
    e.preventDefault()

    files = if e.dataTransfer:
      e.dataTransfer.files
    else if e.target:
      e.target.files
    else:
      []

    if files && files.length:
      file = files[0]
      loader = new ImageLoader(this.handleImageReady, null, this.props.crossOrigin, file)
      loader.readFile(file)

  handleClick(r) =>
    this.input?.click()

  refInput(x) =>
    this.input = x

  render() ->
    passedProps = Object.assign({}, this.props)
    passedProps.style = Object.assign(passedProps.style, { cursor: 'pointer' })

    if not this.props.disableDrop:
      passedProps['onDragOver'] = this.handleDragOver
      passedProps['onDrop'] = this.handleDrop

    if not this.props.disableClick:
      passedProps[this.props.clickEvent] = this.handleClick

    delete passedProps.onImage
    delete passedProps.onError
    delete passedProps.disableDrop
    delete passedProps.disableClick
    delete passedProps.clickEvent

    <div {...passedProps}>
      { if not this.props.disableClick:
        <input ref={this.refInput} type="file" accept="image/*" style={{display: 'none'}} onChange={this.handleDrop} />
      }
      {this.props.children}
    </div>
